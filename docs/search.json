[
  {
    "objectID": "developer_reference.html",
    "href": "developer_reference.html",
    "title": "Technical Reference",
    "section": "",
    "text": "The database is designed to be a MySQL database hosted on AWS. A breakdown of th tables follows:\n\n\nThese tables are used throughout the app. They are cross functional with the main four areas (training, incident, equipment, personnel) of the platform.\n\n\n\nPurpose: Stores the core personnel records for all firefighters within the department. Contains status (active/inactive), role, and other essential information.\nColumn Definitions:\nid (INT, PK) – Unique identifier for each firefighter.\nfull_name (VARCHAR(511)) – The firefighter’s full name.\nstart_date (DATE) – The official start (hire) date.\ntrainer (BOOLEAN) – Indicates whether this firefighter can lead trainings.\nofficer (BOOLEAN) – Indicates whether this firefighter holds an officer rank.\nactive_status (BOOLEAN) – True if actively employed/engaged, false if deactivated or inactive.\ncompany_id (INT, FK → company(id)) – Links the firefighter to a specific crew/company.\nfirefighter_role (VARCHAR(255)) – Descriptive role or title (e.g., Firefighter, Captain, etc.).\nDeletion:\nIn practice, firefighters are not deleted but toggled inactive (active_status = false).\nThe FK to company uses ON DELETE SET NULL, so if a company is removed, the company_id here becomes NULL. They will be orphaned from a company.\nSimilarly, in chain of command, if a firefighter is removed, the FK to firefighter_id uses ON DELETE SET NULL. They will be orphaned in the chain of command.\nJoins:\nfirefighter ↔︎ company on company_id (one company can have many firefighters).\nReferenced by many tables via firefighter_id (e.g., chain_of_command, firefighter_contact, attendance, etc.).\n\n\n\n\nPurpose: Represents a piece of firefighting apparatus (e.g., Engine 1, Ladder Truck). Tracks which vehicles/resources are active and available.\nColumn Definitions:\nid (INT, PK) – Unique identifier for each apparatus.\napparatus_name (VARCHAR(255)) – Official or commonly used name/label.\napparatus_expire (DATE) – Date after which the apparatus is considered “retired” or otherwise not available for new assignments.\nDeletion:\nTypically not deleted if used historically. Instead, the apparatus_expire field indicates it is no longer active. List is managed in the settings tab.\nJoins:\nReferenced in tables such as equipment (equipment can be assigned to an apparatus), apparatus_response, and firefighter_apparatus.\n\n\n\nPurpose: Stores configurable keys and values for various features or behaviors within the platform (system‐wide or departmental settings). See Setting Reference for more details.\nColumn Definitions:\nid (INT, PK) – Unique identifier.\nmajor_setting_key (VARCHAR(255)) – Broad category of the setting.\nminor_setting_key (VARCHAR(255)) – Sub‐key or a more specific setting name.\nsetting_value (VARCHAR(255)) – The stored value.\nDeletion:\nTypically, you might delete old or unused settings. No special constraints beyond the primary key.\nJoins:\nNot usually joined to other tables. Accessed by the application to retrieve configuration.\n\n\n\n\n\nThese tables are used to track training sessions, attendance, and related details.\n\n\n\nPurpose: Defines a training session/event with a topic, time range, and related details.\nColumn Definitions:\nid (INT, PK) – Unique identifier for the training event.\ntraining_type (VARCHAR(255)) – Category or type of training (e.g., “Fire Behavior,” “Rescue Ops”).\ntopic (VARCHAR(255)) – Short description of the subject.\ntraining_description (VARCHAR(1000)) – More detailed information about the training.\nstart_time (DATETIME) – Date/time the training is scheduled to begin.\nend_time (DATETIME) – Date/time the training is scheduled to end.\ncredit_hours (FLOAT/DECIMAL) – Number of credited hours awarded. Defaults to the difference between start_time and end_time.\ntrainer (INT, FK → firefighter(id)) – The firefighter responsible for leading or coordinating the training.\ntraining_expire (DATE) – Date this training was deleted and no longer included in any reporting.\nDeletion:\nTypically not deleted if historical records (attendance) reference it. Instead, might mark expired or keep for audit.\nJoins:\ntraining ↔︎ attendance on id → training_id (one training has many attendance records).\ntraining ↔︎ firefighter on trainer → firefighter(id).\n\n\n\n\nPurpose: Tracks which firefighters attended each training session, plus check‐in/check‐out times.\nColumn Definitions:\nid (INT, PK) – Unique attendance record identifier.\nfirefighter_id (INT, FK → firefighter(id)) – Id of Who attended.\ntraining_id (INT, FK → training(id)) – Which training session.\ncheck_in (DATETIME) – Actual check‐in time.(UTC)\ncheck_out (DATETIME) – Actual check‐out time.(UTC)\nauto_checkout (BOOLEAN) – Indicates if the system automatically handled check‐out.\ncredit (BOOLEAN) – Whether the firefighter receives credit for attending. This is assigned via stored proc in the database.\nexcused (BOOLEAN) – If the firefighter was excused from attending.\nDeletion:\nTypically only removed if the attendance was invalid or created by mistake. Usually retained for record keeping.\nJoins:\nattendance ↔︎ firefighter (many attendance records per firefighter).\nattendance ↔︎ training (many attendance records per training).\n\n\n\n\n\nThese tables are used to track incidents, responses, and related details.\n\n\n\nPurpose: Top‐level record representing a call or event to which the department responds (fire, EMS, etc.).\nColumn Definitions:\nid (INT, PK) – Unique identifier.\ncad_identifier (VARCHAR(255)) – The identifier from the dispatch system.\nincident_start (DATETIME) – When the incident began.\nincident_end (DATETIME) – When the incident concluded or was cleared.\naddress (VARCHAR(255)) – Location of the incident.\ndispatch_code (VARCHAR(255)) – Official code from the dispatch system.\narea (VARCHAR(255)) – Specific category (mutual aid, primary area, municipality, etc.).\ncanceled (BOOLEAN) – True if the incident was canceled.\ndropped (BOOLEAN) – True if the incident was dropped.\nfinalized (BOOLEAN) – True if the incident is closed and all records are finalized.\nincident_expire (DATE) – Mark to exclude from reporting.\nDeletion:\nUsually never deleted; kept indefinitely for auditing. Instead, you will see incident_expire.\nJoins:\nincident ↔︎ response (one incident can have many responses).\nincident ↔︎ incident_unit (tracks which type of response was needed).\n\n\n\n\nPurpose: Represents an actual response instance tied to an incident (e.g., engine 1 responded). Typically, most incidents will only have one response (a response can have multiple firefighters, apparatus, etc.) An example of a mulit-response incident would be a wildland fire where one crew responded for the first 12 hours, and a second crew took over for the next 12 hours.\nColumn Definitions:\nid (INT, PK) – Unique identifier for each response.\nincident_id (INT, FK → incident(id), ON DELETE RESTRICT, ON UPDATE CASCADE) – Which incident this response belongs to.\nresponse_start (DATETIME) – When that response effort began.\nresponse_end (DATETIME) – When that response ended.\nnotes (TEXT) – Field notes, relevant info about the response.\nresponse_expire (DATE) – Exclude from reporting.\nDeletion:\nGenerally retained for incident history. Expire to exclude. ON DELETE RESTRICT ensures the incident cannot be deleted if responses exist.\nJoins:\nresponse ↔︎ incident on incident_id.\nresponse ↔︎ firefighter_response, apparatus_response, firefighter_apparatus.\n\n\n\n\nPurpose: Stores types of units or categories (e.g., Fire, EMS, Wildland, etc.). Departments can customize.\nColumn Definitions:\nid (INT, PK) – Unique identifier.\nunit_type (VARCHAR(255)) – Name/category (e.g., “Fire”, “EMS”, etc.).\nunit_expire (DATE) – When this unit type is no longer considered active for new usage.\nDeletion:\nTypically not removed; once expired, it should not be used for new incidents.\nJoins:\nunit ↔︎ incident_unit (many incidents can reference each unit type).\n\n\n\n\nPurpose: Links an incident to the type of unit (e.g., Fire, EMS, Rescue) that responded.\nColumn Definitions:\nid (INT, PK) – Unique identifier.\nincident_id (INT, FK → incident(id)) – The incident.\nunit_type_id (INT, FK → unit(id)) – The type of unit that responded.\nDeletion:\nTypically retained for historical reference. ON DELETE RESTRICT means you cannot remove an incident or unit if references exist here.\nJoins:\nincident_unit ↔︎ incident.\nincident_unit ↔︎ unit (one incident can have several types of units needed).\nThis application tracks unit type response separately from apparatus because, in many volunteer departments, apparatus are often used simply to transport personnel. In these cases, it’s important to record the type of response unit (e.g., EMS, fire, rescue) independently from the specific vehicle used.\n\n\n\n\nPurpose: Associates individual firefighters with a particular response to track who participated and any time adjustments.\nColumn Definitions:\nid (INT, PK) – Unique record for each firefighter/response combination.\nresponse_id (INT, FK → response(id)) – Which response they participated in.\nfirefighter_id (INT, FK → firefighter(id)) – The firefighter involved.\ntime_adjustment (FLOAT/DECIMAL) – Additional time or offset for reporting hours.\nDeletion:\nNo option for deletion. Edits will overwrite old records.\nJoins:\nfirefighter_response ↔︎ firefighter.\nfirefighter_response ↔︎ response.\n\n\n\n\nPurpose: Tracks which apparatus were assigned to a specific response.\nColumn Definitions:\nid (INT, PK) – Unique identifier.\nresponse_id (INT, FK → response(id)) – The response record.\napparatus_id (INT, FK → apparatus(id)) – The apparatus involved.\nDeletion:\nNo option for deletion. Edits will overwrite old records.\nJoins:\napparatus_response ↔︎ response.\napparatus_response ↔︎ apparatus.\n\n\n\n\nPurpose: Specifically ties a firefighter to an apparatus for the duration of a response (e.g., who was riding on or responsible for which vehicle).\nColumn Definitions:\nid (INT, PK) – Unique identifier.\nresponse_id (INT, FK → response(id)) – Which response.\nfirefighter_id (INT, FK → firefighter(id)) – The firefighter.\napparatus_id (INT, FK → apparatus(id)) – The apparatus.\nDeletion:\nNo option for deletion. Edits will overwrite old records.\nJoins:\nfirefighter_apparatus ↔︎ response.\nfirefighter_apparatus ↔︎ firefighter.\nfirefighter_apparatus ↔︎ apparatus.\n\n\n\n\n\nThese tables are used to track equipment, checks, and compliance.\n\n\n\nPurpose: Defines the category of equipment, plus checking and expiration intervals (e.g., SCBA, Monitor, Defibrillator).\nColumn Definitions:\nid (INT, PK) – Unique identifier for the type.\nequipment_type (VARCHAR(255)) – Descriptive name (e.g., “SCBA Battery”).\ncheck_lead_time, check_lead_time_unit (INT, VARCHAR) – How far in advance of a check you want a warning and the time unit (days, weeks, etc.).\ncheck_time, check_time_unit (INT, VARCHAR) – Frequency of required checks.\nexpire_lead_time, expire_lead_time_unit (INT, VARCHAR) – How far in advance of expiration you want a warning.\nexpire_time, expire_time_unit (INT, VARCHAR) – How long until the equipment of this type typically expires.\nequipment_type_expire (DATE) – Date this type is no longer used.\nDeletion:\nGenerally not physically removed once used in equipment; expired types remain in the system for historical data.\nJoins:\nequipment_type ↔︎ equipment.\n\n\n\n\nPurpose: An instance of a specific piece of equipment belonging to a type and assigned either to a firefighter or apparatus.\nColumn Definitions:\nid (INT, PK) – Unique identifier for each piece of equipment.\nequipment_name (VARCHAR(255)) – Human‐readable name/label.\nequipment_type_id (INT, FK → equipment_type(id)) – What type it is.\nfirefighter_id (INT, FK → firefighter(id)) – If the equipment is assigned to a firefighter.\napparatus_id (INT, FK → apparatus(id)) – If the equipment is assigned to an apparatus.\nnext_check_date (DATE) – When the next required check is due.\nexpiration_date (DATE) – When this item expires.\nsnooze_expires (DATE) – If the check was “snoozed,” when that snooze period ends.\nexpire_equipment (DATE) – Date this equipment no longer shows up in reporting.\nDeletion:\nTypically retained for safety/audit; once “expired,” either have to replace and renew equipment, or, delete the equipment (through setting a date in the expire_equipment column).\nJoins:\nequipment ↔︎ equipment_type.\nPotentially joined to firefighter or apparatus to show ownership/assignment.\nequipment_log references specific equipment checks.\n\n\n\n\nPurpose: Logs each check performed on a piece of equipment, capturing who did it and when.\nColumn Definitions:\nid (INT, PK) – Unique identifier for each log entry.\nchecked_by_id (INT, FK → firefighter(id)) – The firefighter who performed the check.\nequipment_id (INT, FK → equipment(id)) – The item being checked.\ncheck_date_time (DATETIME) – When the check occurred.\nDeletion:\nTypically never deleted unless a check entry was made in error, as it’s important for audit/compliance.\nJoins:\nequipment_log ↔︎ equipment.\nequipment_log ↔︎ firefighter (who did the check).\n\n\n\n\nPurpose: Snapshots overall equipment‐check compliance, typically a percentage representing how many items are up‐to‐date on required checks.\nColumn Definitions:\nid (INT, PK) – Unique identifier for each snapshot record.\ncompliance_date_time (DATETIME) – The timestamp when compliance was calculated.\ncheck_compliance (FLOAT/DECIMAL) – The percentage of equipment that is not overdue for checks (0–100, or a fraction).\nexpire_compliance (FLOAT/DECIMAL) – The percentage of equipment that is not expired (0–100, or a fraction).\noverall_compliance (FLOAT/DECIMAL) – The overall compliance percentage (0–100, or a fraction).\nDeletion:\nGenerally retained for historical trend analysis.\nJoins:\nUsually stands alone, referenced by reporting features rather than a direct join to other tables.\n\n\n\n\n\nThese tables are used to track personnel, certifications, and related details. ___\n\n\nPurpose: Identifies which crew/company (e.g., “A‐Shift,” “Engine 3 Crew”) a firefighter belongs to.\nColumn Definitions:\nid (INT, PK) – Unique identifier for the company.\ncompany_name (VARCHAR(255)) – Descriptive name of the crew/company.\nDeletion:\nCan be removed, but if referenced by a firefighter (company_id), that field is set to NULL.\nJoins:\ncompany ↔︎ firefighter (one‐to‐many).\n\n\n\n\nPurpose: Defines different possible certifications, along with renewal and lead‐time requirements.\nColumn Definitions:\nid (INT, PK) – Unique ID for the certification type.\ncertification_name (VARCHAR(255)) – Name (e.g., “EMT‐Basic,” “Firefighter 1”).\nlead_time, lead_time_unit (INT, VARCHAR) – Advance notice needed before initial certification expiration.\nrenew_time, renew_time_unit (INT, VARCHAR) – How often recertification is required.\ncertification_expire (DATE) – Date this certification type is no longer used.\nDeletion:\nTypically not deleted but expired, to maintain references in certification.\nJoins:\ncertification_type ↔︎ certification.\n\n\n\n\nPurpose: An actual certification instance held by a particular firefighter.\nColumn Definitions:\nid (INT, PK) – Unique identifier for the certification record.\ntype_id (INT, FK → certification_type(id)) – Which certification type.\nfirefighter_id (INT, FK → firefighter(id)) – Who holds the certification.\nexpiration_date (DATE) – When the certification for this individual expires.\nDeletion:\nCan be deleted or renewed. No historical records are kept.\nJoins:\ncertification ↔︎ certification_type.\ncertification ↔︎ firefighter.\n\n\n\n\nPurpose: Captures active/inactive date ranges for each firefighter to calculate total tenure or track leaves/retirements.\nColumn Definitions:\nid (INT, PK) – Unique identifier for each status record.\nfirefighter_id (INT, FK → firefighter(id)) – Linked firefighter.\ninactive_start_date (DATE) – Start of an inactive period.\ninactive_end_date (DATE) – End of that inactive period (NULL if still inactive).\nDeletion:\nTypically not deleted; it’s a timeline record of a firefighter’s employment status.\nJoins:\nfirefighter_status_history ↔︎ firefighter.\n\n\n\n\nPurpose: Defines the supervisory relationships: who reports to whom.\nColumn Definitions:\nid (INT, PK) – Unique record.\nfirefighter_id (INT, FK → firefighter(id)) – The subordinate.\nsupervisor_id (INT, FK → firefighter(id)) – The supervisor.\nDeletion:\nIf a supervisor is deleted (rare), references here become NULL if ON DELETE SET NULL.\nTypically, changes are made by altering references or adding new rows.\nJoins:\nchain_of_command ↔︎ firefighter (both subordinate and supervisor are in the same table).\n\n\n\n\nPurpose: Stores contact details (address, phone, email) for each firefighter.\nColumn Definitions:\nid (INT, PK) – Unique identifier.\nfirefighter_id (INT, FK → firefighter(id)) – Linked firefighter.\nstreet_address_1, street_address_2 (VARCHAR(255)) – Mailing address lines.\ncity (VARCHAR(255)) – City.\nstate (CHAR(2)) – State/province (assuming US 2‐letter codes).\nzip_code (VARCHAR(10)) – ZIP/Postal code.\nphone_number (VARCHAR(15)) – Primary contact number.\nemail_address (VARCHAR(255)) – Primary email.\nDeletion:\nPossibly removed if the contact is outdated or if the firefighter is removed. Usually just updated.\nJoins:\nfirefighter_contact ↔︎ firefighter (one‐to‐one or one‐to‐many if you allow multiple contacts per firefighter)."
  },
  {
    "objectID": "developer_reference.html#database",
    "href": "developer_reference.html#database",
    "title": "Technical Reference",
    "section": "",
    "text": "The database is designed to be a MySQL database hosted on AWS. A breakdown of th tables follows:\n\n\nThese tables are used throughout the app. They are cross functional with the main four areas (training, incident, equipment, personnel) of the platform.\n\n\n\nPurpose: Stores the core personnel records for all firefighters within the department. Contains status (active/inactive), role, and other essential information.\nColumn Definitions:\nid (INT, PK) – Unique identifier for each firefighter.\nfull_name (VARCHAR(511)) – The firefighter’s full name.\nstart_date (DATE) – The official start (hire) date.\ntrainer (BOOLEAN) – Indicates whether this firefighter can lead trainings.\nofficer (BOOLEAN) – Indicates whether this firefighter holds an officer rank.\nactive_status (BOOLEAN) – True if actively employed/engaged, false if deactivated or inactive.\ncompany_id (INT, FK → company(id)) – Links the firefighter to a specific crew/company.\nfirefighter_role (VARCHAR(255)) – Descriptive role or title (e.g., Firefighter, Captain, etc.).\nDeletion:\nIn practice, firefighters are not deleted but toggled inactive (active_status = false).\nThe FK to company uses ON DELETE SET NULL, so if a company is removed, the company_id here becomes NULL. They will be orphaned from a company.\nSimilarly, in chain of command, if a firefighter is removed, the FK to firefighter_id uses ON DELETE SET NULL. They will be orphaned in the chain of command.\nJoins:\nfirefighter ↔︎ company on company_id (one company can have many firefighters).\nReferenced by many tables via firefighter_id (e.g., chain_of_command, firefighter_contact, attendance, etc.).\n\n\n\n\nPurpose: Represents a piece of firefighting apparatus (e.g., Engine 1, Ladder Truck). Tracks which vehicles/resources are active and available.\nColumn Definitions:\nid (INT, PK) – Unique identifier for each apparatus.\napparatus_name (VARCHAR(255)) – Official or commonly used name/label.\napparatus_expire (DATE) – Date after which the apparatus is considered “retired” or otherwise not available for new assignments.\nDeletion:\nTypically not deleted if used historically. Instead, the apparatus_expire field indicates it is no longer active. List is managed in the settings tab.\nJoins:\nReferenced in tables such as equipment (equipment can be assigned to an apparatus), apparatus_response, and firefighter_apparatus.\n\n\n\nPurpose: Stores configurable keys and values for various features or behaviors within the platform (system‐wide or departmental settings). See Setting Reference for more details.\nColumn Definitions:\nid (INT, PK) – Unique identifier.\nmajor_setting_key (VARCHAR(255)) – Broad category of the setting.\nminor_setting_key (VARCHAR(255)) – Sub‐key or a more specific setting name.\nsetting_value (VARCHAR(255)) – The stored value.\nDeletion:\nTypically, you might delete old or unused settings. No special constraints beyond the primary key.\nJoins:\nNot usually joined to other tables. Accessed by the application to retrieve configuration.\n\n\n\n\n\nThese tables are used to track training sessions, attendance, and related details.\n\n\n\nPurpose: Defines a training session/event with a topic, time range, and related details.\nColumn Definitions:\nid (INT, PK) – Unique identifier for the training event.\ntraining_type (VARCHAR(255)) – Category or type of training (e.g., “Fire Behavior,” “Rescue Ops”).\ntopic (VARCHAR(255)) – Short description of the subject.\ntraining_description (VARCHAR(1000)) – More detailed information about the training.\nstart_time (DATETIME) – Date/time the training is scheduled to begin.\nend_time (DATETIME) – Date/time the training is scheduled to end.\ncredit_hours (FLOAT/DECIMAL) – Number of credited hours awarded. Defaults to the difference between start_time and end_time.\ntrainer (INT, FK → firefighter(id)) – The firefighter responsible for leading or coordinating the training.\ntraining_expire (DATE) – Date this training was deleted and no longer included in any reporting.\nDeletion:\nTypically not deleted if historical records (attendance) reference it. Instead, might mark expired or keep for audit.\nJoins:\ntraining ↔︎ attendance on id → training_id (one training has many attendance records).\ntraining ↔︎ firefighter on trainer → firefighter(id).\n\n\n\n\nPurpose: Tracks which firefighters attended each training session, plus check‐in/check‐out times.\nColumn Definitions:\nid (INT, PK) – Unique attendance record identifier.\nfirefighter_id (INT, FK → firefighter(id)) – Id of Who attended.\ntraining_id (INT, FK → training(id)) – Which training session.\ncheck_in (DATETIME) – Actual check‐in time.(UTC)\ncheck_out (DATETIME) – Actual check‐out time.(UTC)\nauto_checkout (BOOLEAN) – Indicates if the system automatically handled check‐out.\ncredit (BOOLEAN) – Whether the firefighter receives credit for attending. This is assigned via stored proc in the database.\nexcused (BOOLEAN) – If the firefighter was excused from attending.\nDeletion:\nTypically only removed if the attendance was invalid or created by mistake. Usually retained for record keeping.\nJoins:\nattendance ↔︎ firefighter (many attendance records per firefighter).\nattendance ↔︎ training (many attendance records per training).\n\n\n\n\n\nThese tables are used to track incidents, responses, and related details.\n\n\n\nPurpose: Top‐level record representing a call or event to which the department responds (fire, EMS, etc.).\nColumn Definitions:\nid (INT, PK) – Unique identifier.\ncad_identifier (VARCHAR(255)) – The identifier from the dispatch system.\nincident_start (DATETIME) – When the incident began.\nincident_end (DATETIME) – When the incident concluded or was cleared.\naddress (VARCHAR(255)) – Location of the incident.\ndispatch_code (VARCHAR(255)) – Official code from the dispatch system.\narea (VARCHAR(255)) – Specific category (mutual aid, primary area, municipality, etc.).\ncanceled (BOOLEAN) – True if the incident was canceled.\ndropped (BOOLEAN) – True if the incident was dropped.\nfinalized (BOOLEAN) – True if the incident is closed and all records are finalized.\nincident_expire (DATE) – Mark to exclude from reporting.\nDeletion:\nUsually never deleted; kept indefinitely for auditing. Instead, you will see incident_expire.\nJoins:\nincident ↔︎ response (one incident can have many responses).\nincident ↔︎ incident_unit (tracks which type of response was needed).\n\n\n\n\nPurpose: Represents an actual response instance tied to an incident (e.g., engine 1 responded). Typically, most incidents will only have one response (a response can have multiple firefighters, apparatus, etc.) An example of a mulit-response incident would be a wildland fire where one crew responded for the first 12 hours, and a second crew took over for the next 12 hours.\nColumn Definitions:\nid (INT, PK) – Unique identifier for each response.\nincident_id (INT, FK → incident(id), ON DELETE RESTRICT, ON UPDATE CASCADE) – Which incident this response belongs to.\nresponse_start (DATETIME) – When that response effort began.\nresponse_end (DATETIME) – When that response ended.\nnotes (TEXT) – Field notes, relevant info about the response.\nresponse_expire (DATE) – Exclude from reporting.\nDeletion:\nGenerally retained for incident history. Expire to exclude. ON DELETE RESTRICT ensures the incident cannot be deleted if responses exist.\nJoins:\nresponse ↔︎ incident on incident_id.\nresponse ↔︎ firefighter_response, apparatus_response, firefighter_apparatus.\n\n\n\n\nPurpose: Stores types of units or categories (e.g., Fire, EMS, Wildland, etc.). Departments can customize.\nColumn Definitions:\nid (INT, PK) – Unique identifier.\nunit_type (VARCHAR(255)) – Name/category (e.g., “Fire”, “EMS”, etc.).\nunit_expire (DATE) – When this unit type is no longer considered active for new usage.\nDeletion:\nTypically not removed; once expired, it should not be used for new incidents.\nJoins:\nunit ↔︎ incident_unit (many incidents can reference each unit type).\n\n\n\n\nPurpose: Links an incident to the type of unit (e.g., Fire, EMS, Rescue) that responded.\nColumn Definitions:\nid (INT, PK) – Unique identifier.\nincident_id (INT, FK → incident(id)) – The incident.\nunit_type_id (INT, FK → unit(id)) – The type of unit that responded.\nDeletion:\nTypically retained for historical reference. ON DELETE RESTRICT means you cannot remove an incident or unit if references exist here.\nJoins:\nincident_unit ↔︎ incident.\nincident_unit ↔︎ unit (one incident can have several types of units needed).\nThis application tracks unit type response separately from apparatus because, in many volunteer departments, apparatus are often used simply to transport personnel. In these cases, it’s important to record the type of response unit (e.g., EMS, fire, rescue) independently from the specific vehicle used.\n\n\n\n\nPurpose: Associates individual firefighters with a particular response to track who participated and any time adjustments.\nColumn Definitions:\nid (INT, PK) – Unique record for each firefighter/response combination.\nresponse_id (INT, FK → response(id)) – Which response they participated in.\nfirefighter_id (INT, FK → firefighter(id)) – The firefighter involved.\ntime_adjustment (FLOAT/DECIMAL) – Additional time or offset for reporting hours.\nDeletion:\nNo option for deletion. Edits will overwrite old records.\nJoins:\nfirefighter_response ↔︎ firefighter.\nfirefighter_response ↔︎ response.\n\n\n\n\nPurpose: Tracks which apparatus were assigned to a specific response.\nColumn Definitions:\nid (INT, PK) – Unique identifier.\nresponse_id (INT, FK → response(id)) – The response record.\napparatus_id (INT, FK → apparatus(id)) – The apparatus involved.\nDeletion:\nNo option for deletion. Edits will overwrite old records.\nJoins:\napparatus_response ↔︎ response.\napparatus_response ↔︎ apparatus.\n\n\n\n\nPurpose: Specifically ties a firefighter to an apparatus for the duration of a response (e.g., who was riding on or responsible for which vehicle).\nColumn Definitions:\nid (INT, PK) – Unique identifier.\nresponse_id (INT, FK → response(id)) – Which response.\nfirefighter_id (INT, FK → firefighter(id)) – The firefighter.\napparatus_id (INT, FK → apparatus(id)) – The apparatus.\nDeletion:\nNo option for deletion. Edits will overwrite old records.\nJoins:\nfirefighter_apparatus ↔︎ response.\nfirefighter_apparatus ↔︎ firefighter.\nfirefighter_apparatus ↔︎ apparatus.\n\n\n\n\n\nThese tables are used to track equipment, checks, and compliance.\n\n\n\nPurpose: Defines the category of equipment, plus checking and expiration intervals (e.g., SCBA, Monitor, Defibrillator).\nColumn Definitions:\nid (INT, PK) – Unique identifier for the type.\nequipment_type (VARCHAR(255)) – Descriptive name (e.g., “SCBA Battery”).\ncheck_lead_time, check_lead_time_unit (INT, VARCHAR) – How far in advance of a check you want a warning and the time unit (days, weeks, etc.).\ncheck_time, check_time_unit (INT, VARCHAR) – Frequency of required checks.\nexpire_lead_time, expire_lead_time_unit (INT, VARCHAR) – How far in advance of expiration you want a warning.\nexpire_time, expire_time_unit (INT, VARCHAR) – How long until the equipment of this type typically expires.\nequipment_type_expire (DATE) – Date this type is no longer used.\nDeletion:\nGenerally not physically removed once used in equipment; expired types remain in the system for historical data.\nJoins:\nequipment_type ↔︎ equipment.\n\n\n\n\nPurpose: An instance of a specific piece of equipment belonging to a type and assigned either to a firefighter or apparatus.\nColumn Definitions:\nid (INT, PK) – Unique identifier for each piece of equipment.\nequipment_name (VARCHAR(255)) – Human‐readable name/label.\nequipment_type_id (INT, FK → equipment_type(id)) – What type it is.\nfirefighter_id (INT, FK → firefighter(id)) – If the equipment is assigned to a firefighter.\napparatus_id (INT, FK → apparatus(id)) – If the equipment is assigned to an apparatus.\nnext_check_date (DATE) – When the next required check is due.\nexpiration_date (DATE) – When this item expires.\nsnooze_expires (DATE) – If the check was “snoozed,” when that snooze period ends.\nexpire_equipment (DATE) – Date this equipment no longer shows up in reporting.\nDeletion:\nTypically retained for safety/audit; once “expired,” either have to replace and renew equipment, or, delete the equipment (through setting a date in the expire_equipment column).\nJoins:\nequipment ↔︎ equipment_type.\nPotentially joined to firefighter or apparatus to show ownership/assignment.\nequipment_log references specific equipment checks.\n\n\n\n\nPurpose: Logs each check performed on a piece of equipment, capturing who did it and when.\nColumn Definitions:\nid (INT, PK) – Unique identifier for each log entry.\nchecked_by_id (INT, FK → firefighter(id)) – The firefighter who performed the check.\nequipment_id (INT, FK → equipment(id)) – The item being checked.\ncheck_date_time (DATETIME) – When the check occurred.\nDeletion:\nTypically never deleted unless a check entry was made in error, as it’s important for audit/compliance.\nJoins:\nequipment_log ↔︎ equipment.\nequipment_log ↔︎ firefighter (who did the check).\n\n\n\n\nPurpose: Snapshots overall equipment‐check compliance, typically a percentage representing how many items are up‐to‐date on required checks.\nColumn Definitions:\nid (INT, PK) – Unique identifier for each snapshot record.\ncompliance_date_time (DATETIME) – The timestamp when compliance was calculated.\ncheck_compliance (FLOAT/DECIMAL) – The percentage of equipment that is not overdue for checks (0–100, or a fraction).\nexpire_compliance (FLOAT/DECIMAL) – The percentage of equipment that is not expired (0–100, or a fraction).\noverall_compliance (FLOAT/DECIMAL) – The overall compliance percentage (0–100, or a fraction).\nDeletion:\nGenerally retained for historical trend analysis.\nJoins:\nUsually stands alone, referenced by reporting features rather than a direct join to other tables.\n\n\n\n\n\nThese tables are used to track personnel, certifications, and related details. ___\n\n\nPurpose: Identifies which crew/company (e.g., “A‐Shift,” “Engine 3 Crew”) a firefighter belongs to.\nColumn Definitions:\nid (INT, PK) – Unique identifier for the company.\ncompany_name (VARCHAR(255)) – Descriptive name of the crew/company.\nDeletion:\nCan be removed, but if referenced by a firefighter (company_id), that field is set to NULL.\nJoins:\ncompany ↔︎ firefighter (one‐to‐many).\n\n\n\n\nPurpose: Defines different possible certifications, along with renewal and lead‐time requirements.\nColumn Definitions:\nid (INT, PK) – Unique ID for the certification type.\ncertification_name (VARCHAR(255)) – Name (e.g., “EMT‐Basic,” “Firefighter 1”).\nlead_time, lead_time_unit (INT, VARCHAR) – Advance notice needed before initial certification expiration.\nrenew_time, renew_time_unit (INT, VARCHAR) – How often recertification is required.\ncertification_expire (DATE) – Date this certification type is no longer used.\nDeletion:\nTypically not deleted but expired, to maintain references in certification.\nJoins:\ncertification_type ↔︎ certification.\n\n\n\n\nPurpose: An actual certification instance held by a particular firefighter.\nColumn Definitions:\nid (INT, PK) – Unique identifier for the certification record.\ntype_id (INT, FK → certification_type(id)) – Which certification type.\nfirefighter_id (INT, FK → firefighter(id)) – Who holds the certification.\nexpiration_date (DATE) – When the certification for this individual expires.\nDeletion:\nCan be deleted or renewed. No historical records are kept.\nJoins:\ncertification ↔︎ certification_type.\ncertification ↔︎ firefighter.\n\n\n\n\nPurpose: Captures active/inactive date ranges for each firefighter to calculate total tenure or track leaves/retirements.\nColumn Definitions:\nid (INT, PK) – Unique identifier for each status record.\nfirefighter_id (INT, FK → firefighter(id)) – Linked firefighter.\ninactive_start_date (DATE) – Start of an inactive period.\ninactive_end_date (DATE) – End of that inactive period (NULL if still inactive).\nDeletion:\nTypically not deleted; it’s a timeline record of a firefighter’s employment status.\nJoins:\nfirefighter_status_history ↔︎ firefighter.\n\n\n\n\nPurpose: Defines the supervisory relationships: who reports to whom.\nColumn Definitions:\nid (INT, PK) – Unique record.\nfirefighter_id (INT, FK → firefighter(id)) – The subordinate.\nsupervisor_id (INT, FK → firefighter(id)) – The supervisor.\nDeletion:\nIf a supervisor is deleted (rare), references here become NULL if ON DELETE SET NULL.\nTypically, changes are made by altering references or adding new rows.\nJoins:\nchain_of_command ↔︎ firefighter (both subordinate and supervisor are in the same table).\n\n\n\n\nPurpose: Stores contact details (address, phone, email) for each firefighter.\nColumn Definitions:\nid (INT, PK) – Unique identifier.\nfirefighter_id (INT, FK → firefighter(id)) – Linked firefighter.\nstreet_address_1, street_address_2 (VARCHAR(255)) – Mailing address lines.\ncity (VARCHAR(255)) – City.\nstate (CHAR(2)) – State/province (assuming US 2‐letter codes).\nzip_code (VARCHAR(10)) – ZIP/Postal code.\nphone_number (VARCHAR(15)) – Primary contact number.\nemail_address (VARCHAR(255)) – Primary email.\nDeletion:\nPossibly removed if the contact is outdated or if the firefighter is removed. Usually just updated.\nJoins:\nfirefighter_contact ↔︎ firefighter (one‐to‐one or one‐to‐many if you allow multiple contacts per firefighter)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Fire Data is an open source project that has several apps developed to be used together to track and report on administrative data in volunteer fire departments. Check out the presentation for this project at PositConf 2024.\nThis was developed originally in two different repositories. The history of both repositories have been included in this one. If you want to see the original repositories, they are linked here and here.\n\n\n\nThis code is licensed under CC BY-NC-SA. The general idea of this project is it can be setup to run with minimal modification. The general steps are as follows:\n\nClone the repository.\nEstablish an AWS mySQL server and get the necessary credentials.\nRun the table setup scrips.\nStore database credentials, table names, and other specific values in an .Renviron file. Use the Renviron template file to start (note, you have to have one file for each app and it must be in the top level of each project).\nPublish to shinyapps.io.\n\n\n\n\n\n\nThis is the admin level app that allows for reporting, training and personal management, and soon managing and editing calls. Currently, the functionality is minimal. More coming soon.\nUpcoming changes include:\n\nAbility to modify check-in/check-out times\nIncident Analysis\nFull functionality to edit trainings, calls, etc.\n\nSee a fully functioning example app here.\n\n\n\nThis is the most tried and tested app currently. This allows people to check in and out of trainings for training hours. The admin password to sign everyone out is “positconf2024”.\nUpcoming features include:\n\nColor distinct modals that emphasize if you are checking in or out.\nGeneral UI improvements.\n\nSee a fully functioning example app here.\n\n\n\nThe first version of this was released in v0.3.0. This allows departments to track who attended calls, what units were used, amount of time spent on the call, etc. This will eventually integrate with a backend server that can be set up to email reports with data and visuals as needed.\nSee a fully functioning example app here."
  },
  {
    "objectID": "about.html#usage",
    "href": "about.html#usage",
    "title": "About",
    "section": "",
    "text": "This code is licensed under CC BY-NC-SA. The general idea of this project is it can be setup to run with minimal modification. The general steps are as follows:\n\nClone the repository.\nEstablish an AWS mySQL server and get the necessary credentials.\nRun the table setup scrips.\nStore database credentials, table names, and other specific values in an .Renviron file. Use the Renviron template file to start (note, you have to have one file for each app and it must be in the top level of each project).\nPublish to shinyapps.io."
  },
  {
    "objectID": "about.html#apps",
    "href": "about.html#apps",
    "title": "About",
    "section": "",
    "text": "This is the admin level app that allows for reporting, training and personal management, and soon managing and editing calls. Currently, the functionality is minimal. More coming soon.\nUpcoming changes include:\n\nAbility to modify check-in/check-out times\nIncident Analysis\nFull functionality to edit trainings, calls, etc.\n\nSee a fully functioning example app here.\n\n\n\nThis is the most tried and tested app currently. This allows people to check in and out of trainings for training hours. The admin password to sign everyone out is “positconf2024”.\nUpcoming features include:\n\nColor distinct modals that emphasize if you are checking in or out.\nGeneral UI improvements.\n\nSee a fully functioning example app here.\n\n\n\nThe first version of this was released in v0.3.0. This allows departments to track who attended calls, what units were used, amount of time spent on the call, etc. This will eventually integrate with a backend server that can be set up to email reports with data and visuals as needed.\nSee a fully functioning example app here."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fire Data Documentation",
    "section": "",
    "text": "This is the documentation for Fire Data, a solution for tracking and analyzing data in the volunteer fire service. This document provides an overview of the data structure, key features, and usage instructions.\nIf you are interested in having this project hosted for you, please contact jwrichey.1@gmail.com.\nFor users who have an instance up and running and have questions, check out the User Reference page.\nFor users who are interested in the code and how it works, check out the Developer Reference page.\nMore information about the project can be found in the About page."
  }
]